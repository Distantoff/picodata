Command = _{ SOI ~ Query ~ EOF }

Query = _{ UnionAll | Select | Values | Insert }
    Select = {
        ^"select" ~ Projection ~ ^"from" ~ Scan ~
        (((^"inner" ~ ^"join") | ^"join") ~ InnerJoin ~
        ^"on" ~ Condition)? ~ (^"where" ~ Selection)?
    }
        Projection = { ((Asterisk | Column) ~ ("," ~ (Asterisk | Column))*?) }
            Column = { Row | Alias | Value | Reference }
                Alias = {(Value | Reference) ~ ^"as" ~ AliasName }
                AliasName = @{ Name }
                Reference = { (ScanName ~ "." ~ ColumnName) | ColumnName }
                    ColumnName = @{ Name }
                    ScanName = @{ Name }
                    Name = @{ String | ("\"" ~ String ~ "\"") }
                Asterisk = @{ "*" }
        Selection = { Expr+ }
        Scan = { (SubQuery | Table) ~ (^"as" ~ ScanName)? }
            Table = @{ Name }
        InnerJoin = { Scan }
        Condition = { Expr+ }
    UnionAll = { (SubQuery | Select) ~ ^"union" ~ ^"all" ~ (SubQuery | Select) }
    SubQuery = { "(" ~ (UnionAll | Select | Values) ~ ")" }
    Insert = { ^"insert" ~ ^"into" ~ Table ~ ("(" ~ TargetColumns ~ ")")? ~ (Values | Select) }
        TargetColumns = { ColumnName ~ ("," ~ ColumnName)* }
    Values = { ^"values" ~ ValuesRow ~ ("," ~ ValuesRow)*? }
        ValuesRow = { Row }

Expr = _{  Or | And | Cmp | Primary | Parentheses }
    Parentheses = _{ "(" ~ Expr ~ ")" }
    Primary = _{ SubQuery | Value | Reference }
    Cmp = _{ Eq | In | Gt | GtEq | Lt | LtEq | NotEq }
    Eq = { EqLeft ~ "=" ~ EqRight }
        EqLeft = _{ Primary }
        EqRight = _{ Eq | EqLeft }
    In = { InLeft ~ ^"in" ~ InRight }
        InLeft = _{ EqRight }
        InRight = _{ In | InLeft }
    Gt = { GtLeft ~ ">" ~ GtRight }
        GtLeft = _{ InRight }
        GtRight = _{ Gt | GtLeft }
    GtEq = { GtEqLeft ~ ">=" ~ GtEqRight }
        GtEqLeft = _{ GtRight }
        GtEqRight = _{ GtEq | GtEqLeft }
    Lt = { LtLeft ~ "<" ~ LtRight }
        LtLeft = _{ GtEqRight }
        LtRight = _{ Lt | LtLeft }
    LtEq = { LtEqLeft ~ "<=" ~ LtEqRight }
        LtEqLeft = _{ LtRight }
        LtEqRight = _{ LtEq | LtEqLeft }
    NotEq = { NotEqLeft ~ ("<>" | "!=") ~ NotEqRight }
        NotEqLeft = _{ LtEqRight }
        NotEqRight = _{ NotEq | NotEqLeft }
    And = { AndLeft ~ ^"and" ~ AndRight }
        AndLeft = _{ Cmp | Primary | Parentheses }
        AndRight = _{ And | AndLeft }
    Or = { OrLeft ~ ^"or" ~ OrRight }
        OrLeft = _{ AndRight }
        OrRight = _{ Or | OrLeft }

String = @{ !(WHITESPACE* ~ Keyword ~ WHITESPACE) ~ ('А' .. 'Я' | 'а' .. 'я' | 'A' .. 'Z' | 'a'..'z' | "-" | "_" | ASCII_DIGIT)+ }
    Keyword = { ^"union" | ^"where" }

Value = _{ Parameter | Row | True | False | Null | Decimal | Double | Unsigned | Integer | SingleQuotedString }
    True = @{ ^"true" }
    False = @{ ^"false" }
    Null = @{ ^"null" }
    Decimal = @{ Integer ~ ("." ~ ASCII_DIGIT*) }
    Double = @{ Integer ~ ("." ~ ASCII_DIGIT*)? ~ (^"e" ~ Integer) }
    Integer = @{ ("+" | "-")? ~ ASCII_DIGIT+ }
    Unsigned = @{ ASCII_DIGIT+ }
    SingleQuotedString = _{ "'" ~ String ~ "'" }
    Row = {
        ("(" ~ (Value | Reference) ~ ("," ~ (Value | Reference))* ~ ")")
        | (^"row" ~ "(" ~ (Value | Reference) ~ ("," ~ (Value | Reference))* ~ ")")
    }
    Parameter = @{ "?" }

EOF = { EOI | ";" }
WHITESPACE = _{ " " | "\t" | "\n" | "\n\r" }
