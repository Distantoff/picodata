Command = _{ SOI ~ (ExplainQuery | Query | DDL) ~ EOF }

DDL = _{ CreateTable | DropTable }
    CreateTable = {
        ^"create" ~ ^"table" ~ NewTable ~
        "(" ~ Columns ~ "," ~ PrimaryKey ~ ")" ~
        Engine? ~ Distribution ~ Option?
    }
    NewTable = @{ Table }
    Columns = { ColumnDef ~ ("," ~ ColumnDef)* }
        ColumnDef = { ColumnDefName ~ ColumnDefType ~ ColumnDefIsNull? }
        ColumnDefName = @{ ColumnName }
        ColumnDefType = { TypeBool | TypeDecimal | TypeDouble
             | TypeInt | TypeNumber | TypeScalar | TypeString
             | TypeText | TypeUnsigned | TypeVarchar }
        ColumnDefIsNull = { ColumnIsNull | ColumnIsNotNull }
            ColumnIsNull = { ^"null" }
            ColumnIsNotNull = { ^"not" ~ ^"null" }
    PrimaryKey = {
        ^"primary" ~ ^"key" ~
        "(" ~ PrimaryKeyColumn ~ ("," ~ PrimaryKeyColumn)* ~ ")"
    }
       PrimaryKeyColumn = @{ ColumnName }
    Engine = { ^"using" ~ (Memtx | Vinyl) }
        Memtx = { ^"memtx" }
        Vinyl = { ^"vinyl" }
    Distribution = { ^"distributed" ~ (Global | Sharding) }
    Global = { ^"globally" }
    Sharding = { ^"by" ~ "(" ~ ShardingColumn ~ ("," ~ ShardingColumn)* ~ ")"}
       ShardingColumn = @{ ColumnName }

    DropTable = { ^"drop" ~ ^"table" ~ DeletedTable ~ Option? }
    	DeletedTable = @{ Table }

ExplainQuery = _{ Explain }
    Explain = { ^"explain" ~ Query }

Query = { (Except | UnionAll | Select | Values | Insert) ~ Option? }
    Select = {
        ^"select" ~ Projection ~ ^"from" ~ Scan ~
        Join? ~ (^"where" ~ Selection)? ~ 
        (^"group" ~ ^"by" ~ GroupBy)? ~
        (^"having" ~ Having)?
    }
        Projection = { Distinct? ~  (Asterisk | Column) ~ ("," ~ (Asterisk | Column))* }
            Column = { Alias | Expr | Value }
                Alias = {(Expr | Value) ~ ^"as" ~ AliasName }
                AliasName = @{ Name }
                Reference = { (ScanName ~ "." ~ ColumnName) | ColumnName }
                    ColumnName = @{ Name }
                    ScanName = @{ Name }
                    Name = @{ NameString | ("\"" ~ NameString ~ "\"") }
                Asterisk = { "*" }
        Selection = { Expr }
        Scan = { (SubQuery | Table) ~ (^"as" ~ ScanName)? }
            Table = @{ Name }
        Join = { JoinKind? ~ ^"join" ~ Scan ~ ^"on" ~ Condition }
        JoinKind = _{ ( InnerJoinKind | LeftJoinKind ) }
        InnerJoinKind = { ^"inner" }
        LeftJoinKind = { ^"left" ~ (^"outer")? }
        Condition = { Expr }
        GroupBy = { GroupingElement ~ ("," ~ GroupingElement)* }
        Having = { Expr }
    UnionAll = { Select ~ ^"union" ~ ^"all" ~ Select }
    Except = { Select ~ ((^"except" ~ ^"distinct") | ^"except") ~ Select }
    SubQuery = { "(" ~ (Except | UnionAll | Select | Values) ~ ")" }
    Insert = { ^"insert" ~ ^"into" ~ Table ~ ("(" ~ TargetColumns ~ ")")? ~ 
    (Values | Select) ~ OnConflict? }
        TargetColumns = { ColumnName ~ ("," ~ ColumnName)* }
        OnConflict = _{ ^"on conflict" ~ ^"do" ~ (DoNothing | DoReplace | DoFail) }
        DoReplace = { ^"replace" }
        DoNothing = { ^"nothing" }
        DoFail = { ^"fail" }
    Values = { ^"values" ~ ValuesRow ~ ("," ~ ValuesRow)* }
        ValuesRow = { Row }
    Option = _{ ^"option" ~ "(" ~ OptionParam ~ ("," ~ OptionParam)* ~ ")" }
    OptionParam = _{ Timeout | SqlVdbeMaxSteps | VTableMaxRows }
    Timeout = { ^"timeout" ~ "=" ~ Duration}
       Duration = @{ Unsigned ~ ("." ~ Unsigned)? }
    SqlVdbeMaxSteps = { ^"sql_vdbe_max_steps" ~ "=" ~ (Unsigned | Parameter) }
    VTableMaxRows = { ^"vtable_max_rows" ~ "=" ~ (Unsigned | Parameter) }

Expr = _{ Or | And | Unary | Between | Cmp | Primary | Parentheses }
    Parentheses = _{ "(" ~ Expr ~ ")" }
    Primary = _{ SubQuery | ArithmeticExpr | Concat | Cast | Row | Function | Value }
    Concat = { ConcatLeft ~ ^"||" ~ ConcatRight }
        ConcatLeft = _{ Cast | Function | Reference | SingleQuotedString }
        ConcatRight = _{ Concat | ConcatLeft }
    ArithmeticExpr = _{ Addition | Multiplication | ArithParentheses }
        ArithParentheses = { "(" ~ ArithmeticExpr ~ ")" }
        ArithELeft = _{ Cast | Row | Function | ArithParentheses | Value }
        Multiplication = { ArithELeft ~ (Multiply | Divide) ~ MultiplicationRight }
            MultiplicationRight = _{ Multiplication | ArithELeft }
        Addition = { AdditionLeft ~ (Add | Subtract) ~ AdditionRight }
            AdditionLeft = _{ MultiplicationRight }
            AdditionRight = _{ Addition | MultiplicationRight }
        Multiply = { "*" }
        Divide = { "/" }
        Add = { "+" }
        Subtract = { "-" }
    Unary = _{ IsNull | IsNotNull | Exists | NotExists }
        Exists = { ^"exists" ~ SubQuery }
        NotExists = { ^"not" ~ ^"exists" ~ SubQuery }
        IsNull = { Primary ~ ^"is" ~ ^"null" }
        IsNotNull = { Primary ~ ^"is" ~ ^"not" ~ ^"null" }
    Cmp = { Primary ~ CmpOp ~ Primary }
        CmpOp = _{ Eq | In | NotEq | NotIn | GtEq | Gt | LtEq | Lt }
        Eq = { "=" }
        In = { ^"in" }
        Gt = { ">" }
        GtEq = { ">=" }
        Lt = { "<" }
        LtEq = { "<=" }
        NotEq = { "<>" | "!=" }
        NotIn = { ^"not" ~ ^"in" }
    Between = { BetweenLeft ~ ^"between" ~ BetweenCenter ~ ^"and" ~ BetweenRight }
        BetweenLeft = _{ Primary }
        BetweenCenter = _{ Primary }
        BetweenRight = _{ Primary }
    And = { AndLeft ~ ^"and" ~ AndRight }
        AndLeft = _{ Unary | Between | Cmp | Primary | Parentheses }
        AndRight = _{ And | AndLeft }
    Or = { OrLeft ~ ^"or" ~ OrRight }
        OrLeft = _{ AndRight }
        OrRight = _{ Or | OrLeft }

Function = { FunctionName ~ "(" ~ (CountAsterisk | (Distinct? ~  FunctionArgs)) ~ ")" }
    FunctionName = @{ Name }
    FunctionArgs = _{ (FunctionExpr ~ ("," ~ FunctionExpr)*)? }
    FunctionExpr = _{ Parentheses | Primary }
    CountAsterisk = { "*" }

Distinct = { ^"distinct" }

Cast = { ^"cast" ~ "(" ~ CastExpr ~ ^"as" ~ Type ~ ")" }
    CastExpr = _{ Parentheses | Primary }
    Type = _{ TypeAny | TypeBool | TypeDecimal | TypeDouble
             | TypeInt | TypeNumber | TypeScalar | TypeString
             | TypeText | TypeUnsigned | TypeVarchar }
    TypeAny = { ^"any" }
    TypeBool = { (^"boolean" | ^"bool") }
    TypeDecimal = { ^"decimal" }
    TypeDouble = { ^"double" }
    TypeInt = { (^"integer" | ^"int") }
    TypeNumber = { ^"number" }
    TypeScalar = { ^"scalar" }
    TypeString = { ^"string" }
    TypeText = { ^"text" }
    TypeUnsigned = { ^"unsigned" }
    TypeVarchar = { ^"varchar" ~ "(" ~ Length ~ ")" }
        Length = @{ Unsigned }

GroupingElement = _{ Expr }

NameLetters = _{ ('А' .. 'Я' | 'а' .. 'я' | 'A' .. 'Z' | 'a'..'z' | "-" | "_") }
NameString = @{ !(WHITESPACE* ~ Keyword ~ WHITESPACE) ~ ((NameLetters ~ (NameLetters | ASCII_DIGIT)+) | NameLetters+) }
String = @{ !(WHITESPACE* ~ Keyword ~ WHITESPACE) ~ (Character | ("'" ~ "'") | "\"")* }
Keyword = { ^"except" | ^"union" | ^"where" | ^"distinct" }
Character = _{ LETTER | NUMBER | Other | OTHER_ALPHABETIC| Punctuation | SYMBOL }
Punctuation = _{
    CONNECTOR_PUNCTUATION
    | DASH_PUNCTUATION
    | OPEN_PUNCTUATION
    | CLOSE_PUNCTUATION
    | INITIAL_PUNCTUATION
    | "." | "?" | "!" | ":" | ";" | ","
}
Other = _{ "\\" | "/" | "@" | "%" | "&" | "*" | "#" | "§" | "»" | WHITESPACE }

Value = _{ Parameter | True | False | Null | Decimal | Double | Unsigned | Integer | Reference | SingleQuotedString }
    True = @{ ^"true" }
    False = @{ ^"false" }
    Null = @{ ^"null" }
    Decimal = @{ Integer ~ ("." ~ ASCII_DIGIT*) }
    Double = @{ Integer ~ ("." ~ ASCII_DIGIT*)? ~ (^"e" ~ Integer) }
    Integer = @{ ("+" | "-")? ~ ASCII_DIGIT+ }
    Unsigned = @{ ASCII_DIGIT+ }
    SingleQuotedString = ${ "'" ~ String ~ "'" }
    Row = {
        ("(" ~ RowElem ~ ("," ~ RowElem)* ~ ")")
        | (^"row" ~ "(" ~ RowElem ~ ("," ~ RowElem)* ~ ")")
    }
    RowElem = _{ Concat | Cast | Row | Function | Value }
    Parameter = @{ "?" }

EOF = { EOI | ";" }
WHITESPACE = _{ " " | "\t" | "\n" | "\r\n" }
