
variables:
  GIT_SUBMODULE_STRATEGY: none
  GIT_DEPTH: 1
  BASE_IMAGE_NAME: docker-public.binary.picodata.io/sbroad-builder
  BASE_IMAGE_TAG: latest
  DOCKER_AUTH_CONFIG: $DOCKER_AUTH_RW
  FF_NETWORK_PER_BUILD: 1
  RAW_REGISTRY: $RAW_PRIVATE_REGISTRY
  FF_USE_FASTZIP: "true"
  CACHE_COMPRESSION_LEVEL: "fastest"


  CI_DEBUG_SERVICES: "true"

stages:
  - build
  - test
  - stress-test
  - stress-test-processing
  - deploy

workflow:
  # See https://docs.gitlab.com/ee/ci/jobs/job_control.html#avoid-duplicate-pipelines
  rules:
    # To avoid duplicate pipelines we disable merge request events,
    # leaving only pushes and manual triggering.
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_PIPELINE_SOURCE == "push"
    - if: $CI_PIPELINE_SOURCE == "web"

.cache-rocks: &cache-rocks
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - target

.cache-rocks-app: &cache-rocks-app
  key:
    files:
      - sbroad-cartridge/test_app/test_app-scm-1.rockspec
  paths:
    - sbroad-cartridge/test_app/.rocks

default:
  tags:
    - docker
  image:
    name: $BASE_IMAGE_NAME:$BASE_IMAGE_TAG
    pull_policy: [always]
  retry:
    max: 1
    when:
      - scheduler_failure
      - runner_system_failure
      - stuck_or_timeout_failure
      - api_failure

build-lib:
  stage: build
  script:
    - make
  cache:
    - <<: *cache-rocks
      policy: push
    - <<: *cache-rocks-app
      policy: push

.kaniko_image: &kaniko_image
  image:
    name: docker-public.binary.picodata.io/kaniko-project/executor:v1.23.1-debug
    entrypoint: ['']
    pull_policy: [if-not-present]

build-base-image:
  stage: build
  <<: *kaniko_image
  variables:
    DOCKERFILE: ci/Dockerfile
  rules:
    - if: $CI_COMMIT_TAG
  before_script:
    - mkdir -p /kaniko/.docker
    - echo "$DOCKER_AUTH_CONFIG" > /kaniko/.docker/config.json
    - |
      if [ "$DOCKER_AUTH_CONFIG" == "" ]; then
        echo "Error: Access to push in docker registry only for protected tag or branch!"
        exit 1
      fi
  script:
    - BASE_IMAGE_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "latest")
    - >
      /kaniko/executor --context $CI_PROJECT_DIR --dockerfile ${DOCKERFILE}
      --build-arg COMMIT_HASH=${CI_COMMIT_SHA} ${PUSH_DOCKER}
      --cache=false --cache-run-layers=true --single-snapshot --compressed-caching=false --use-new-run --snapshot-mode=redo --cleanup
      --destination ${BASE_IMAGE_NAME}:${BASE_IMAGE_TAG}

build-stress-image:
  stage: build
  <<: *kaniko_image
  cache:
    - <<: *cache-rocks
      policy: pull
  variables:
    GIT_USERNAME: $CI_REGISTRY_USER
    GIT_PASSWORD: $CI_REGISTRY_PASSWORD
    DOCKERFILE: ci/docker_template.stress
  needs: ["build-lib"]
  script:
    - BASE_IMAGE_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "latest")
    - sed -i "s/__BASE_IMAGE_TAG__/$BASE_IMAGE_TAG/" ${DOCKERFILE}
    - >
      /kaniko/executor --context $CI_PROJECT_DIR --dockerfile ${DOCKERFILE}
      --build-arg COMMIT_HASH=${CI_COMMIT_SHA} ${PUSH_DOCKER}
      --cache=false --cache-run-layers=true --single-snapshot --compressed-caching=false --use-new-run --snapshot-mode=redo --cleanup
      --destination $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA

.test:
  stage: test
  cache:
    - <<: *cache-rocks
      policy: pull    
    - <<: *cache-rocks-app
      policy: pull

lint:
  extends: [.test]
  script:
    - make lint

unit:
  extends: [.test]
  script:
    - make test

integration:
  extends: [.test]
  variables:
    # k8s runner config
    KUBERNETES_CPU_REQUEST: 6
    KUBERNETES_MEMORY_REQUEST: "6Gi"
  script:
    - make test_integration
  artifacts:
    paths:
      - sbroad-cartridge/test_app/tmp/tarantool.log
    expire_in: 1 week

bench:
  extends: [.test]
  script:
    - make bench_check

stress_tests:
  parallel:
    matrix:
      - STRESS_TEST:
        - projection
        - projection_wide
        - groupby
        - insert
  variables:
    TNT_HOST: tarantool
    STRESS_TEST: insert
  services:
    - name: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
      alias: tarantool
      pull_policy: [if-not-present]
  image: docker-public.binary.picodata.io/k6_tnt:latest
  stage: stress-test
  allow_failure: true
  script:
    - echo "STRESS_TEST=${STRESS_TEST}"
    # wait while tnt cluster is started
    - sbroad-cartridge/stress-test/check_tnt.sh
    - mkdir -p sbroad-cartridge/stress-test/$CI_COMMIT_BRANCH/${STRESS_TEST}/
    - k6 run -u 10 -d 1m -e HOST=${TNT_HOST} sbroad-cartridge/stress-test/${STRESS_TEST}/k6.js --summary-export sbroad-cartridge/stress-test/$CI_COMMIT_BRANCH/${STRESS_TEST}/k6_summary.json
  needs: ["build-stress-image"]
  cache:
    - key: $CI_COMMIT_BRANCH-k6_summary-${STRESS_TEST}
      paths:
        - sbroad-cartridge/stress-test/$CI_COMMIT_BRANCH/${STRESS_TEST}/k6_summary.json
      policy: push
    - <<: *cache-rocks
      policy: pull
    - <<: *cache-rocks-app
      policy: pull
  artifacts:
    paths:
      - sbroad-cartridge/stress-test/$CI_COMMIT_BRANCH/${STRESS_TEST}/k6_summary.json
    expire_in: 1 hour
    when: always

store-stress-results-for-main:
  rules:
    - if: $CI_COMMIT_BRANCH ==  $CI_DEFAULT_BRANCH
  stage: stress-test-processing
  script:
    - |
      tar -czvf sbroad-main-test-results.tgz -C sbroad-cartridge/stress-test/ .
      curl -f -H "Authorization: Basic $RAW_AUTH_RW" --upload-file sbroad-main-test-results.tgz $RAW_REGISTRY/sbroad-stress-tests/
  needs:
    - "stress_tests: [projection]"
    - "stress_tests: [projection_wide]"
    - "stress_tests: [groupby]"
    - "stress_tests: [insert]"

diff_stress-results:
  image: $BASE_IMAGE_NAME:$BASE_IMAGE_TAG
  stage: stress-test-processing
  when: manual
  variables:
    FARCH: "sbroad-main-test-results.tgz"
  script:
    - |
      curl $RAW_REGISTRY/sbroad-stress-tests/$FARCH -o $FARCH
      file $FARCH
      set -x
      if [ ! -f ${FARCH} -o $(file -i ${FARCH} | grep gzip | wc -l) -eq 0 ] ; then
        echo "Error: archive ${FARCH} not found on binary"
        exit 1
      fi
      tar -xvf $FARCH -C sbroad-cartridge/stress-test/
      cd sbroad-cartridge/stress-test/
      find -name k6_summary.json
      for D in $(find . -name k6_summary.json -exec sh -c "dirname {} | sed 's/.*\///g'" \; ); do
        echo "Branch = $D"
        if [ "$D" != "main" -a -f main/$D/k6_summary.json -a -f $CI_COMMIT_BRANCH/$D/k6_summary.json ]; then
        tarantool compare.lua main/$D/k6_summary.json $CI_COMMIT_BRANCH/$D/k6_summary.json
        elif [ "$D" == main ]; then
          echo "skipped"
        else
          echo "Error: stress-test results not found!"; exit 2;
        fi
      done
  needs:
    - "stress_tests: [projection]"
    - "stress_tests: [projection_wide]"
    - "stress_tests: [groupby]"
    - "stress_tests: [insert]"
  artifacts:
    paths:
      - sbroad-cartridge/stress-test/**/**/k6_summary.json
    expire_in: 1 week
    when: always

deploy-luarocks:
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG
  before_script:
    - eval $(ssh-agent -s)
    - echo "$DEPLOY_PROD_SSH_KEY" | base64 -d | ssh-add -
    - |
      if [ "$DEPLOY_PROD_SSH_KEY" == "" ]; then
        echo "Error: Access to push in docker registry only for protected tag or branch!"
        exit 1
      fi
  script:
    - make release_rock
    - echo "Deploying luarocks..."
    - scp -o stricthostkeychecking=no sbroad*rock luarocks@94.26.239.246:/data/nginx/www/packrepo/luarocks
    - ssh -o stricthostkeychecking=no luarocks@94.26.239.246 "luarocks-admin make_manifest /data/nginx/www/packrepo/luarocks"
  cache:
    - <<: *cache-rocks
      policy: pull