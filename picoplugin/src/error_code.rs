use tarantool::error::TarantoolErrorCode;
use tarantool::static_assert;

tarantool::define_enum_with_introspection! {
    /// Error codes used with [`BoxError`] which are only generated by picodata.
    ///
    /// [`BoxError`]: tarantool::error::BoxError
    pub enum ErrorCode {
        // NOTE: At the moment of writing this the maximum tarantool error code
        // on master branch is 286, but we still leave a huge window between
        // that and our first error code just to be absolutely safe.
        //
        // We also don't want to go too big because of the msgpack encoding size
        // considerations (65535 is the largest number which serializes into 3 bytes).

        /// This is the first picodata error code. Use this for errors which
        /// are hard to categorize and for which there's no specific way of handling.
        ///
        /// Also please use a **unique error message** for these kinds of errors,
        /// so it's easy to find where it was generated in code.
        ///
        /// If your error instead should be handled in a specific way please
        /// add a new one if the existing ones don't satisfy your needs.
        Other = 10000,

        /// Requested instance is not a leader.
        NotALeader = 10001,

        /// Contents of a builtin table has invalid format.
        StorageCorrupted = 10002,

        NoSuchService = 10011,
        ServiceNotStarted = 10012,
        ServicePoisoned = 10013,
        ServiceNotAvailable = 10014,
        WrongPluginVersion = 10015,

        NoSuchInstance = 10016,
        NoSuchReplicaset = 10017,

        // TODO: put in particular compare-and-swap related ones, but also other ones

        /// Not an actual error code, just designates the start of the range.
        UserDefinedErrorCodesStart = 20000,
        // Plugin writers should use error codes in this range
    }
}

impl From<ErrorCode> for u32 {
    #[inline(always)]
    fn from(code: ErrorCode) -> u32 {
        code as _
    }
}

static_assert!(
    ErrorCode::MIN as u32 > TarantoolErrorCode::MAX as u32,
    "picodata error code range must not intersect tarantool's ones"
);
static_assert!(
    ErrorCode::MAX as u32 <= ErrorCode::UserDefinedErrorCodesStart as u32,
    "picodata builtin error code range must not intersect with user defined ones"
);
